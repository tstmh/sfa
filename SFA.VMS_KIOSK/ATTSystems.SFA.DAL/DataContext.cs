// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ATTSystems.NetCore.EntityFramework;
using ATTSystems.NetCore.Model.DBModel;
using ATTSystems.SFA.Model.DBModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ATTSystems.SFA.DAL
{
    public partial class DataContext : DBCoreCtx
    {
        public DataContext(): base()
        {
        }
        
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<AlertMessage> AlertMessage { get; set; }
        public virtual DbSet<MessageLogs> MessageLogs { get; set; }
        public virtual DbSet<AssetType> AssetTypes { get; set; }
        public virtual DbSet<BlacklistTransaction> BlacklistTransactions { get; set; }

        public virtual DbSet<CardIssueDetail> CardIssueDetails { get; set; }
        public virtual DbSet<ChangePasswordAudit> ChangePasswordAudits { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<PasswordSetting> PasswordSettings { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<Terminal> Terminals { get; set; }
        public virtual DbSet<TokenAuth> TokenAuths { get; set; }
        public virtual DbSet<UnitDetail> UnitDetails { get; set; }
        public virtual DbSet<UsersSessionsTracking> UsersSessionsTrackings { get; set; }
        public virtual DbSet<VisitPurpose> VisitPurposes { get; set; }
        public virtual DbSet<VisitType> VisitTypes { get; set; }
        public virtual DbSet<VisitorIdentity> VisitorIdentities { get; set; }
        public virtual DbSet<VisitorRegistration> VisitorRegistrations { get; set; }
        public virtual DbSet<VisitorTransaction> VisitorTransactions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.CreateBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.CreateDateTime).HasDefaultValueSql("(getdate())");

                entity.HasMany(d => d.Departments)
                    .WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserDepartment",
                        l => l.HasOne<Department>().WithMany().HasForeignKey("DepartmentId").HasConstraintName("FK_dbo.UserDepartments_dbo.DepartmentId"),
                        r => r.HasOne<User>().WithMany().HasForeignKey("UserId").HasConstraintName("FK_dbo.UserDepartments_dbo.Users_UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "DepartmentId").HasName("PK_dbo.UserDepartments");

                            j.ToTable("UserDepartments");

                            j.IndexerProperty<int>("DepartmentId").HasColumnName("Department_ID");
                        });

                entity.HasMany(d => d.Groups)
                    .WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserGroup",
                        l => l.HasOne<Group>().WithMany().HasForeignKey("GroupId").HasConstraintName("FK_dbo.UserGroups_dbo.GroupId"),
                        r => r.HasOne<User>().WithMany().HasForeignKey("UserId").HasConstraintName("FK_dbo.UserGroups_dbo.Users_UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "GroupId").HasName("PK_dbo.UserGroups");

                            j.ToTable("UserGroups");

                            j.IndexerProperty<int>("GroupId").HasColumnName("Group_ID");
                        });

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserRole",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("RoleId").HasConstraintName("FK_dbo.UserRoles_dbo.Roles_RoleId"),
                        r => r.HasOne<User>().WithMany().HasForeignKey("UserId").HasConstraintName("FK_dbo.UserRoles_dbo.Users_UserId"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId").HasName("PK_dbo.UserRoles");

                            j.ToTable("UserRoles");
                        });
            });

            modelBuilder.Entity<Department>(entity =>
            {

                entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");

                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.CreateDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Department_Name");

                entity.Property(e => e.UpdateBy).HasMaxLength(256);

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.CreateBy).HasDefaultValueSql("(N'')");

                entity.Property(e => e.CreateDateTime).HasDefaultValueSql("(getdate())");

                entity.HasMany(d => d.Modules)
                    .WithMany(p => p.Roles)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoleModule",
                        l => l.HasOne<Module>().WithMany().HasForeignKey("ModuleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.RoleModule_dbo.ModuleId"),
                        r => r.HasOne<Role>().WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.RoleModule_dbo.RoleId"),
                        j =>
                        {
                            j.HasKey("RoleId", "ModuleId");

                            j.ToTable("RoleModule");
                        });
            });
            modelBuilder.Entity<Asset>(entity =>
            {
                entity.ToTable("Asset");

                entity.Property(e => e.AssetName).HasMaxLength(50);

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Ip)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Link)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("link");

                entity.Property(e => e.Port)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.AssetTypeNavigation)
                    .WithMany(p => p.Assets)
                    .HasForeignKey(d => d.AssetType)
                    .HasConstraintName("FK_Asset_AssetType");
            });

            modelBuilder.Entity<AssetType>(entity =>
            {
                entity.ToTable("AssetType");

                entity.Property(e => e.DeviceTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BlacklistTransaction>(entity =>
            {
                entity.ToTable("BlacklistTransaction");

                entity.Property(e => e.BlacklistBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BlacklistDateTime).HasColumnType("datetime");

                entity.Property(e => e.BlacklistReason).HasMaxLength(512);

                entity.Property(e => e.BlacklistResult)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NricOrPassport)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CardIssueDetail>(entity =>
            {
                entity.Property(e => e.CardNumber)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.NricOrPassport)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.NricOrPassportNavigation)
                    .WithMany(p => p.CardIssueDetails)
                    .HasPrincipalKey(p => p.NricOrPassport)
                    .HasForeignKey(d => d.NricOrPassport)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CardIssue__NricO__0D7A0286");
            });

            modelBuilder.Entity<ChangePasswordAudit>(entity =>
            {
                entity.ToTable("ChangePasswordAudit");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Password).IsRequired();
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("Location");

                entity.Property(e => e.CreateDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationAddress)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.LocationDescription)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.LocationEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PasswordSetting>(entity =>
            {
                entity.ToTable("PasswordSetting");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreatedBy).HasMaxLength(256);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(256);
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.ToTable("Status");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Terminal>(entity =>
            {
                entity.ToTable("Terminal");

                entity.Property(e => e.ClientIp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientPort)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ServerIp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServerPort)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TerminalName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TokenAuth>(entity =>
            {
                entity.ToTable("TokenAuth");

                entity.Property(e => e.PasswordHash).IsUnicode(false);

                entity.Property(e => e.Token).IsUnicode(false);

                entity.Property(e => e.TokenExpiryDateTime).HasColumnType("datetime");

                entity.Property(e => e.TokenRequestDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserCode)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UnitDetail>(entity =>
            {
                entity.Property(e => e.BlockNo).HasMaxLength(50);

                entity.Property(e => e.UnitId).HasMaxLength(50);

                entity.Property(e => e.UnitNo).HasMaxLength(50);
            });

            modelBuilder.Entity<UsersSessionsTracking>(entity =>
            {
                entity.ToTable("UsersSessionsTracking");

                entity.Property(e => e.AttemptedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LoginDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogoutDateTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VisitPurpose>(entity =>
            {
                entity.ToTable("VisitPurpose");

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.PurposeOfVisit)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VisitType>(entity =>
            {
                entity.ToTable("VisitType");

                entity.Property(e => e.Chinese)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Melayu)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VisitTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VisitorIdentity>(entity =>
            {
                entity.ToTable("VisitorIdentity");

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(256)
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VisitorRegistration>(entity =>
            {
                entity.ToTable("VisitorRegistration");

                entity.HasIndex(e => e.NricOrPassport, "candiateKey_VisitorRegNric")
                    .IsUnique();

                entity.Property(e => e.BlacklistBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BlacklistDateTime).HasColumnType("datetime");

                entity.Property(e => e.BlockNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreateBy)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualCheckInBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NricOrPassport)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PushVisitors).HasColumnName("pushVisitors");

                entity.Property(e => e.ReasonForBlacklist).HasMaxLength(512);

                entity.Property(e => e.RegistrationBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");

                entity.Property(e => e.VehicleNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VisitorContanctNo)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.VisitorName)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.VisitorVisitDesc)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.VistEndDateTime).HasColumnType("datetime");

                entity.Property(e => e.VistStartDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.IdTypeNavigation)
                    .WithMany(p => p.VisitorRegistrations)
                    .HasForeignKey(d => d.IdType)
                    .HasConstraintName("FK__VisitorRe__IdTyp__17036CC0");

                entity.HasOne(d => d.PurposeOfVisit)
                    .WithMany(p => p.VisitorRegistrations)
                    .HasForeignKey(d => d.PurposeOfVisitId)
                    .HasConstraintName("FK__VisitorRe__Purpo__17F790F9");

                entity.HasOne(d => d.VisitType)
                    .WithMany(p => p.VisitorRegistrations)
                    .HasForeignKey(d => d.VisitTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VisitorRegistrationVisitTypeId");

                entity.HasMany(d => d.Locations)
                    .WithMany(p => p.NricOrPassports)
                    .UsingEntity<Dictionary<string, object>>(
                        "VisitorLocation",
                        l => l.HasOne<Location>().WithMany().HasForeignKey("LocationId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_VisitorLocation_Location"),
                        r => r.HasOne<VisitorRegistration>().WithMany().HasPrincipalKey("NricOrPassport").HasForeignKey("NricOrPassport").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_VisitorLocation_VisitorRegistration"),
                        j =>
                        {
                            j.HasKey("NricOrPassport", "LocationId");

                            j.ToTable("VisitorLocation");

                            j.IndexerProperty<string>("NricOrPassport").HasMaxLength(50).IsUnicode(false);
                        });
            });

            modelBuilder.Entity<VisitorTransaction>(entity =>
            {
                entity.ToTable("VisitorTransaction");

                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");

                entity.Property(e => e.EntryDoor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExitDateTime).HasColumnType("datetime");

                entity.Property(e => e.ExitDoor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NricOrPassport)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReactivatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.ReasonToReactivate).HasMaxLength(250);

                entity.Property(e => e.TransactionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.VisitorTransactions)
                    .HasForeignKey(d => d.LocationId)
                    .HasConstraintName("FK_VisitorTransaction_Location");

                entity.HasOne(d => d.NricOrPassportNavigation)
                    .WithMany(p => p.VisitorTransactions)
                    .HasPrincipalKey(p => p.NricOrPassport)
                    .HasForeignKey(d => d.NricOrPassport)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__VisitorTr__NricO__19DFD96B");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}