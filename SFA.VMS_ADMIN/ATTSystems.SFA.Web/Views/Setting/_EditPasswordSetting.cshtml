@model ATTSystems.SFA.Model.ViewModel.PasswordSettingViewModel


<script src="@Url.Content("~/js/jquery.validate.js")"></script>
<script src='@Url.Content("~/js/admin.js")'></script>
<style>
    .modal-backdrop {
        opacity: 0.3 !important
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        /*width: 100%;*/
        
    }

    #btnSave{
        color:#ffffff;
    }
    </style>
<div class="modal fade" id="Editsettpwsd" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Update Password Setting</h4>
            </div>

            
            <form id="editPasswordForm" method="post">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.Id)
                <div class="modal-body">
                    <div class="row clearfix">
                        <div class="col-sm-12">
                            <div class="form-group form-float">
                                <div class="form-line">
                                    <label class="form-label">MaxPasswordLife @* <span class="spanRequired">*</span> *@</label>
                                    @Html.TextBoxFor(model => model.MaxPwdLife, new { @class = "form-control",id= "_MaxPwdLife", @maxlength=3, @data_val = "true", required = "required",  })
                                    @Html.ValidationMessageFor(model => model.MaxPwdLife, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group form-float">
                                <div class="form-line">
                                    <label class="form-label">MaxPasswordFailedCount@* <span class="spanRequired">*</span> *@ </label>
                                    @Html.TextBoxFor(model => model.MaxPwdFailedCount, new { @class = "form-control",id= "_MaxPwdFailedCount", @maxlength = 2, })
                                    @Html.ValidationMessageFor(model => model.MaxPwdFailedCount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group form-float">
                                <div class="form-line">
                                    <label class="form-label">MinPasswordLength@* <span class="spanRequired">*</span>  *@</label>
                                    @Html.TextBoxFor(model => model.MinPwdLength, new { @class = "form-control",id= "_MinPwdLength", @maxlength = 2, })
                                    @Html.ValidationMessageFor(model => model.MinPwdLength, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group form-float">
                                <div class="form-line">
                                    <label class="form-label">MinLowerCase@* <span class="spanRequired">*</span> *@ </label>
                                    @Html.TextBoxFor(model => model.MinLowerCase, new { @class = "form-control",id= "_MinLowerCase", @maxlength = 1, })
                                    @Html.ValidationMessageFor(model => model.MinLowerCase, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group form-float">
                                <div class="form-line">
                                    <label class="form-label">MinUpperCase@* <span class="spanRequired">*</span> *@ </label>
                                    @Html.TextBoxFor(model => model.MinUpperCase, new { @class = "form-control",id= "_MinUpperCase", @maxlength = 1, })
                                    @Html.ValidationMessageFor(model => model.MinUpperCase, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group form-float">
                                <div class="form-line">
                                    <label class="form-label">MinNumeric@* <span class="spanRequired">*</span> *@ </label>
                                    @Html.TextBoxFor(model => model.MinNumeric, new { @class = "form-control",id= "_MinNumeric",@maxlength = 1 })
                                    @Html.ValidationMessageFor(model => model.MinNumeric, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group form-float">
                                <div class="form-line">
                                    <label class="form-label">MinSpecialCharacter@* <span class="spanRequired">*</span> *@ </label>
                                    @Html.TextBoxFor(model => model.MinSpecialCharacter, new { @class = "form-control",id= "_MinSpecialCharacter", @maxlength = 1, })
                                    @Html.ValidationMessageFor(model => model.MinSpecialCharacter, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="row clearfix js-sweetalert divModalFooterButton">
                        <button type="button" class="btn  waves-effect" style="background-color: #E9510E" id="btnSave">UPDATE</button>
                        <button type="button" class="btn bg-grey waves-effect" data-dismiss="modal">CLOSE</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
$("#btnSave").click(function() {

    var mxp = $("#_MaxPwdFailedCount").val();
    var abc = $("#_MaxPwdLife").val();
    var mpl = $("#_MinPwdLength").val();
    var mlc = $("#_MinLowerCase").val();
    var muc = $("#_MinUpperCase").val();
    var mnu = $("#_MinNumeric").val();
    var msc = $("#_MinSpecialCharacter").val();
    if (abc == "" || abc <= 0) {
        swal("info", "Please enter valid MaxPwdLife value", "info");
        return false;
    }

    /*else if ($("#_MaxPwdFailedCount").val() == "")*/
    else if (mxp == "" || mxp <= 0) {
        swal("info", "Please enter valid MaxPwdFailedCount value", "info");
        return false;
    }
    else if (mpl == "" || mpl <= 0) {
        swal("info", "Please enter MinPwdLength value", "info");
        return false;
    }
    else if (mlc == "" || mlc <= 0) {
        swal("info", "Please enter MinLowerCase value", "info");
        return false;
    }
    else if (muc == "" || muc <= 0) {
        swal("info", "Please enter MinUpperCase value", "info");
        return false;
    }
    else if (mnu == "" || mnu <= 0) {
        swal("info", "Please enter MinNumeric value", "info");
        return false;
    }
    else if (msc == "" || msc <= 0) {
        swal("info", "Please enter MinSpecialCharacter value", "info");
        return false;
    }
    else {

        $.ajax({
            type: "POST",
            url: "@Url.Action("UpdatePswSetting", "Setting")",
            data: $("#editPasswordForm").serialize(),
            cache: false,
            dataType: "json",
            success: function(e) { 
                
                
                SuccessEditpassword(e); },
            error: function(e) { FailEditpassword(e); },
        });
    }
});
var prevErr = [];
    function SuccessEditpassword(e){
        
        $("#loader").modal('hide');

        if (e.code == 200){
            $('#editPasswordForm').modal('hide');
            swal("Success", "Password successfully updated", "success");
            
             var relativeURI = "@Url.Action("ListPasswordSetting", "Setting")";
                           renderPartialView(relativeURI);
                           $('.modal-backdrop').remove()
        }
        else {
            // clear previous error message
            if (prevErr.length > 0) {
                for (i = 0; i < prevErr.length; i++) {
                    $(prevErr[0]).html("");
                }
            }

            // process error message
            prevErr = [];

            if (e.resultCode == 203){
                var errTok = e.resultDescription.split("|");

                for (i = 0; i < errTok.length; i++) {
                    var tok = errTok[i].split(":");

                    prevErr.push('#' + tok[0])
                    $('#' + tok[0]).html(tok[1]);
                }
            }

            showDialog(e.resultDescription, "Password not updated", "info", "Setting", "ListPasswordSetting", 0, false, false);
        }

    }

    function FailEditRole(e){
        $("#loader").modal('hide');
        showDialog(e.statusText, "PasswordSetting", "error", "", "", 0, false, false);
        $('#logoutForm').submit()
    }





</script>
<script>
    $('#_MinUpperCase').keyup(function () {
        if (!this.value.match(/[1-9]/)) {
            this.value = this.value.replace(/[^1-9]/g, '');
        }
    });
    $('#_MinLowerCase').keyup(function () {
        if (!this.value.match(/[1-9]/)) {
            this.value = this.value.replace(/[^1-9]/g, '');
        }
    });
    $('#_MinNumeric').keyup(function () {
        if (!this.value.match(/[1-9]/)) {
            this.value = this.value.replace(/[^1-9]/g, '');
        }
    });
    $('#_MinSpecialCharacter').keyup(function () {
        if (!this.value.match(/[1-9]/)) {
            this.value = this.value.replace(/[^1-9]/g, '');
        }
    });
    $('#_MinPwdLength').keyup(function () {
        if (!this.value.match(/[1-99]/)) {
            this.value = this.value.replace(/[^1-99]/g, '');
        }
    });
    $('#_MaxPwdLife').keyup(function () {
        if (!this.value.match(/[1-999]/)) {
            this.value = this.value.replace(/[^1-999]/g, '');
        }
    });
    $('#_MaxPwdFailedCount').keyup(function () {
        if (!this.value.match(/[1-99]/)) {
            this.value = this.value.replace(/[^1-99]/g, '');
        }
    });
</script>
